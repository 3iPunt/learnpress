import{elLPOverlay,lpModalOverlay}from"../../../../utils/lp-modal-overlay";import handleAjax from"../../../../utils/handle-ajax-api";const $=jQuery,elToolUpgradeDB=$("#lp-tool-upgrade-db"),upgradeDB=()=>{let e=0;const l=elToolUpgradeDB.find(".wrapper-terms-upgrade"),a=elToolUpgradeDB.find(".wrapper-lp-status-upgrade"),t=elToolUpgradeDB.find(".wrapper-lp-upgrade-message");let s=null;if(l.length){lpModalOverlay.setContentModal(l.html());const e=elLPOverlay.find(".terms-upgrade"),t=e.find("input[name=lp-agree-term]"),o=e.find(".error"),n=$("input[name=message-when-upgrading]").val();s=function(){return o.hide(),o.removeClass("learn-press-message"),t.is(":checked")?(handleAjax("/lp/v1/database/agree_terms",{agree_terms:1},{}),lpModalOverlay.elFooter.find(".learn-press-notice").remove(),lpModalOverlay.elFooter.prepend('<span class="learn-press-notice">'+n+"</span>"),lpModalOverlay.setContentModal(a.html()),!0):(o.show(),o.addClass("learn-press-message"),lpModalOverlay.elMainContent.animate({scrollTop:o.offset().top}),!1)}}else lpModalOverlay.setContentModal(a.html()),s=function(){return!0};lpModalOverlay.setTitleModal(elToolUpgradeDB.find("h2").html()),lpModalOverlay.elBtnYes.text("Upgrade"),lpModalOverlay.elBtnYes.show(),lpModalOverlay.elBtnNo.text("close"),lpModalOverlay.callBackYes=function(){if(!s())return;e=1,lpModalOverlay.elBtnYes.hide(),lpModalOverlay.elBtnNo.hide();const l=elLPOverlay.find(".lp-group-step"),a=elToolUpgradeDB.find(".lp-item-step"),o=[];$.each(a,(function(e,l){const a=$(l);if(!a.hasClass("completed")){const e=a.find("input").val();o.push(e)}}));const n={steps:o,step:o[0]};let r=null;const p=(e,a)=>{r=l.find("input[value="+e+"]").closest(".lp-item-step"),r.addClass("running"),100===a&&r.removeClass("running").addClass("completed"),r.find(".progress-bar").css("width",a+"%"),r.find(".percent").text(a+"%")};p(o[0],.1);const d={success:a=>{p(n.step,a.percent),n.step!==a.name&&p(a.name,.1),(e=>{r=l.find("input[value="+e+"]").closest(".lp-item-step");const a=r.offset().top-lpModalOverlay.elMainContent.offset().top+lpModalOverlay.elMainContent.scrollTop();lpModalOverlay.elMainContent.stop().animate({scrollTop:a},600)})(n.step),"success"===a.status?(n.step=a.name,n.data=a.data,setTimeout(()=>{handleAjax("/lp/v1/database/upgrade",n,d)},800)):"finished"===a.status?(e=0,r.removeClass("running").addClass("completed"),setTimeout(()=>{lpModalOverlay.setContentModal(t.html())},1e3),lpModalOverlay.elFooter.find(".learn-press-notice").remove(),lpModalOverlay.elBtnNo.show(),lpModalOverlay.elBtnNo.on("click",()=>{window.location.reload()})):(e=0,lpModalOverlay.elFooter.find(".learn-press-notice").remove(),r.removeClass("running").addClass("error"),lpModalOverlay.setContentModal(t.html(),(function(){lpModalOverlay.elBtnYes.text("Retry").show(),lpModalOverlay.elBtnNo.show(),a.message||(a.message="Upgrade not success! Please clear cache, restart sever then retry or contact to LP to help"),lpModalOverlay.elMainContent.find(".learn-press-message").addClass("error").html(a.message)})))},error:l=>{e=0,lpModalOverlay.setContentModal(t.html(),(function(){lpModalOverlay.elBtnYes.text("Retry").show(),lpModalOverlay.elBtnNo.show(),l.message||(l.message="Upgrade not success! Something wrong. Please clear cache, restart sever then retry or contact to LP to help"),lpModalOverlay.elMainContent.find(".learn-press-message").addClass("error").html(l.message)}))},completed:()=>{}};handleAjax("/lp/v1/database/upgrade",n,d)},window.onbeforeunload=function(){if(e)return"LP is upgrading Database. Are you want to reload page?"},window.onclose=function(){if(e)return"LP is upgrading Database. Are you want to close page?"}},getStepsUpgradeStatus=()=>{if(!elToolUpgradeDB.length)return;const e=$(".wrapper-lp-status-upgrade"),l=window.location.search,a=new URLSearchParams(l).get("action");"upgrade-db"===a&&(elLPOverlay.show(),lpModalOverlay.instance||lpModalOverlay.init(),lpModalOverlay.setTitleModal(elToolUpgradeDB.find("h2").html()),lpModalOverlay.setContentModal($(".wrapper-lp-loading").html()));handleAjax("/lp/v1/database/get_steps",{},{success:l=>{const{steps_completed:t,steps_default:s}=l;if(void 0===t||void 0===s)return console.log("invalid steps_completed and steps_default"),!1;let o="";for(const l in s){const n=s[l],r=n.steps;o='<div class="lp-group-step">',o+="<h3>"+n.label+"</h3>";for(const e in r){const l=r[e];let a="";void 0!==t[e]&&(a="completed"),o+='<div class="lp-item-step '+a+'">',o+='<div class="lp-item-step-left"><input type="hidden" name="lp_steps_upgrade_db[]" value="'+l.name+'"  /></div>',o+='<div class="lp-item-step-right">',o+='<label for=""><strong></strong>'+l.label+"</label>",o+='<div class="description">'+l.description+"</div>",o+='<div class="percent"></div>',o+='<span class="progress-bar"></span>',o+="</div>",o+="</div>"}o+="</div>",e.append(o);const p=$(".lp-btn-upgrade-db");"upgrade-db"===a&&upgradeDB(),p.on("click",(function(){lpModalOverlay.instance||lpModalOverlay.init(),elLPOverlay.show(),upgradeDB()}))}},error:e=>{},completed:()=>{}})};export default getStepsUpgradeStatus;